{"version":3,"sources":["Components/Button.jsx","Components/CountCard.jsx","Components/DailyCounts.jsx","Components/firebaseconnection.jsx","App.js","index.js"],"names":["Button","props","react_default","a","createElement","type","class","id","concat","name","onClick","databaseRef","timeRef","child","String","Date","amount","document","getElementById","value","typeOfFeeding","alert","console","log","fed","set","poop-diaper","wet-diaper","onClickMethond","firebaseRef","CountCard","date","wets","poops","feeds","breastFeeds","bottleFeeds","DailyCounts","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nameConverter","Breast Milk","Bottle","dailyCounts","fireBaseData","timeTable","keys","forEach","key","currentDay","getDate","currentMonth","getMonth","valueToUpdate","dateKey","convertedName","sortTimeTableAscendingOrder","timeTableObj","datesAsNumbers","map","time","parseInt","replace","sort","b","dateToArray","split","splice","join","state","loadTimeTable","setState","data","_this2","Components_CountCard","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ref","App","transformData","obj","output","todaysDate","push","firebaseLoaded","firebaseData","countsData","on","snapshot","val","errorObject","code","className","Components_Button","logData","JSON","stringify","Components_DailyCounts","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.3a953551.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\n\nconst Button = (props) => {\n  const onClickMethond = (type, databaseRef) => { \n    const timeRef = databaseRef.child(String(new Date()));\n    const amount = type === 'fed' ? document.getElementById('amount').value : false\n    const typeOfFeeding = type === 'fed' ? document.getElementById('type').value : false\n    if( type === 'fed' && (!amount || !typeOfFeeding)){\n      alert('You need to add amount of milk and type of milk')\n    }\n    console.log({ 'fed': { amount, typeOfFeeding } })\n    switch(type){\n      case 'poop-diaper':\n          timeRef.set({ 'poop-diaper': 1 })\n          break;\n      case 'wet-diaper':\n          timeRef.set({ 'wet-diaper': 1 })\n          break;\n      case 'fed':\n          timeRef.set({ 'fed': { amount, typeOfFeeding } })\n          break;\n      default:\n        break\n    }\n    \n  }\n  return ( \n    <div>\n      <button \n      type=\"button\"\n      class=\"btn btn-lg btn-primary\"\n      id={`${props.name}`}\n      onClick={() => { onClickMethond(props.name, props.firebaseRef) }}\n      >\n        {props.name}\n      </button>\n    {\n      props.name === \"fed\" ? \n        <div>\n          <label>\n            Amount in Ounces\n            <input id=\"amount\" type=\"number\" />\n          </label>\n        <label>\n          Type of Feeding\n        <select id=\"type\">\n          <option>Breast Milk</option>\n          <option>Bottle</option>\n        </select>\n      </label>\n      </div>\n      : null\n    }\n    </div>\n    \n  )\n}\n\n\n\nexport default Button","import React from 'react'\n\nconst CountCard = props => {\n    return (\n        <div class=\"card\">\n        <div class=\"card-body\">\n            <h2>Date</h2>\n            <h5 class=\"card-title\">{props.date}</h5>\n            <h4>Wet Diapers</h4>\n            <p class=\"card-text\">{props.wets}</p>\n            <h4>Poop Diapers</h4>\n            <p class=\"card-text\">{props.poops}</p>\n            <h4># of Feeds</h4>\n            <p class=\"card-text\">{props.feeds}</p>\n            <h4># of Breasts Feeds</h4>\n            <p class=\"card-text\">{props.breastFeeds}</p>\n            <h4># of Bottle Feeds</h4>\n            <p class=\"card-text\">{props.bottleFeeds}</p>\n        </div>\n        </div>\n    )\n}\n\n\n\nexport default CountCard","import React, { Component } from 'react';\nimport CountCard from './CountCard'\n\nclass DailyCounts extends Component {\n    constructor(){\n        super()\n        this.state = {\n            timeTable: [],\n            loadTimeTable: false\n        }\n    }\n    nameConverter = name => {\n        return {\n            \"wet-diaper\": \"wets\",\n            \"fed\": \"feeds\",\n            \"poop-diaper\": \"poops\",\n            \"Breast Milk\": \"breastFeeds\",\n            \"Bottle\": \"bottleFeeds\"\n\n        }[name]\n    }\n    dailyCounts = fireBaseData => {\n        const timeTable = {}\n        Object.keys(fireBaseData).forEach(key => {\n            \n            const currentDay = new Date(key).getDate()\n            const currentMonth = new Date(key).getMonth()+1\n            const valueToUpdate = Object.keys(fireBaseData[key])[0]            \n            const dateKey = `${currentMonth}-${currentDay}`\n            if(!timeTable[dateKey]) {\n                timeTable[dateKey] = {\n                    wets:0,\n                    poops: 0,\n                    feeds: 0,\n                    breastFeeds: 0,\n                    bottleFeeds: 0\n                }\n            }\n           \n            if(fireBaseData[key][valueToUpdate].typeOfFeeding){\n                const convertedName = this.nameConverter(fireBaseData[key][valueToUpdate].typeOfFeeding)\n                \n                timeTable[dateKey][convertedName] =\n                timeTable[dateKey][convertedName] + 1\n            }else {\n            timeTable[dateKey][this.nameConverter(valueToUpdate)] =\n            timeTable[dateKey][this.nameConverter(valueToUpdate)] + 1\n            }\n            \n          })\n          return timeTable\n    }\n\n    sortTimeTableAscendingOrder = timeTableObj => {\n        const numberToDateConverter = date => {\n            const dateToArray = String(date).split(\"\")\n            dateToArray.splice(1, 0, \"-\")\n            return dateToArray.join(\"\")\n        }\n        let datesAsNumbers = Object.keys(timeTableObj).map(time => parseInt(time.replace(\"-\",\"\")))\n        datesAsNumbers = datesAsNumbers.sort((a,b) => b-a)\n        datesAsNumbers = datesAsNumbers.map(numberToDateConverter)\n        return datesAsNumbers\n    }\n\n  \n    componentWillMount(){\n        this.setState({timeTable: this.dailyCounts(this.props.data), loadTimeTable: true})\n    }\n    render() {\n        return (\n            <div>\n                {\n                    this.state.loadTimeTable ? \n                    this.sortTimeTableAscendingOrder(this.state.timeTable).map(key =>(\n                        <CountCard \n                        date={key}\n                        wets={this.state.timeTable[key].wets}\n                        poops={this.state.timeTable[key].poops}\n                        feeds={this.state.timeTable[key].feeds}\n                        breastFeeds={this.state.timeTable[key].breastFeeds}\n                        bottleFeeds={this.state.timeTable[key].bottleFeeds}\n                        />\n                    ))\n                    :\n                    null\n                }\n            </div>\n        )\n    }\n}\n\nexport default DailyCounts","import * as firebase from 'firebase';\nvar config = {\n    apiKey: \"AIzaSyAc7uNDEHsEQlAM8D1-ybuhiVRsR69DTRM\",\n    authDomain: \"amready-171619.firebaseapp.com\",\n    databaseURL: \"https://amready-171619.firebaseio.com\",\n    projectId: \"amready-171619\",\n    storageBucket: \"amready-171619.appspot.com\",\n    messagingSenderId: \"276606987301\",\n    appId: \"1:276606987301:web:518f01630ac1d9a1\"\n  };\nfirebase.initializeApp(config);\n\nexport const databaseRef = firebase.database().ref();","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './Components/Button'\nimport DailyCounts from './Components/DailyCounts'\n\nimport { databaseRef } from './Components/firebaseconnection'\n\n class  App extends  Component {\n   constructor(){\n     super()\n     this.state = {\n       firebaseLoaded: false,\n       firebaseData: [],\n       countsData: {}\n     }\n   }\n   transformData = obj => {\n     const output = []\n     let todaysDate = new Date ()\n     // const currentMonth = todaysDate.getMonth()\n     todaysDate = todaysDate.getDate()\n    Object.keys(obj).forEach(key => {\n      const currentDate = new Date(key)\n      if(currentDate.getDate() === todaysDate ) {\n        output.push({time:key, data: obj[key]})\n      }\n    })\n    return output\n   }\n   componentDidMount(){\n    databaseRef.on(\"value\", (snapshot) => {\n      this.setState({firebaseLoaded: true, firebaseData: this.transformData(snapshot.val()), countsData:snapshot.val() })\n    }, function (errorObject) {\n      console.log(\"The read failed: \" + errorObject.code);\n    });\n   }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Button name='poop-diaper' firebaseRef={databaseRef}/>\n        <Button name='wet-diaper' firebaseRef={databaseRef} />\n        <Button name='fed' firebaseRef={databaseRef} />\n        <ul>\n        {\n          this.state.firebaseLoaded ? \n          this.state.firebaseData.map(logData => <li>{`Date: ${logData.time}  Information: ${JSON.stringify( logData.data, null, 4)}  `}</li>)\n          : null\n        }\n        </ul>\n        {\n          this.state.firebaseLoaded ? \n          <DailyCounts data={this.state.countsData} />\n          : null\n        }\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}